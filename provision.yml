---
- name: "Configure GPU VM"
  hosts: 'all'
  become: yes
  become_method: sudo

  vars:
    azure_pipelines_agent_version: "2.164.8"
    azure_pipelines_agent_filename: "vsts-agent-linux-x64-{{ azure_pipelines_agent_version }}.tar.gz"
    azure_pipelines_agent_dir: "myagent"
    azure_pipelines_organization: "{{ lookup('env','AZURE_DEVOPS_ORGANIZATION') }}"
    azure_pipelines_token: "{{ lookup('env','AZURE_DEVOPS_PAT_TOKEN') }}"
    azure_pipelines_pool: "{{ lookup('env','AZURE_DEVOPS_GPU_POOL') }}"

    # Pass in 'cloud_provider' as variable to pick the pre-licensed GRID driver to install
    nvidia_grid_driver_source:
      # See https://docs.microsoft.com/en-us/azure/virtual-machines/linux/n-series-driver-setup
      # and https://github.com/Azure/azhpc-extensions/blob/master/NvidiaGPU/resources.json for direct
      # locations of pre-licensed GRID driver. The URL https://go.microsoft.com/fwlink/?linkid=874272
      # provides the "latest" driver available but we need more control.
      azure: "https://download.microsoft.com/download/1/a/5/1a537cae-5b52-4348-acd2-2f210fc412b0/NVIDIA-Linux-x86_64-430.46-grid.run"
      # See https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/install-nvidia-driver.html
      aws: "http://ec2-linux-nvidia-drivers.s3.amazonaws.com/grid-9.1/NVIDIA-Linux-x86_64-430.46-grid.run"
      # See https://cloud.google.com/compute/docs/gpus/add-gpus#installing_grid_drivers_for_virtual_workstations
      gcp: "https://storage.googleapis.com/nvidia-drivers-us-public/GRID/GRID9.1/NVIDIA-Linux-x86_64-430.46-grid.run"

 # roles:
    
  tasks:
  - name: Update and upgrade apt packages
    apt:
      upgrade: yes
      update_cache: yes

  - name: Install support for repository access via https
    apt:
      name: "{{ packages }}"
    vars:
      packages:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg-agent
        - software-properties-common

  - name: Add an Apt signing key to a specific keyring file
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add Stable Docker repository
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
      state: present

  - name: Install Docker CE
    apt:
      name: "{{ packages }}"
    vars:
      packages:
        - docker-ce
        - docker-ce-cli
        - containerd.io

  - name: Allow Docker access to non-root user
    user:
      name: '{{ ansible_user }}'
      groups: docker
      append: yes

  # Need GCC and Make to install NVIDIA driver, xorg/gdm3 for OpenGL apps
  - name: Install Xorg, GCC and make
    apt:
      name: "{{ packages }}"
    vars:
      packages:
        - gcc
        - make
        - mesa-utils
        - xorg
        - daemon

  - name: Download NVIDIA GRID driver for the current cloud provider
    get_url:
      url: "{{ nvidia_grid_driver_source[cloud_provider] }}"
      dest: "/tmp/NVIDIA_Driver_GRID.run"
      mode: '0755'

  - name: Install the NVIDIA driver in silent mode, will not upgrade a previous version (you need fancier check)
    command: "/tmp/NVIDIA_Driver_GRID.run -s"
    args:
      creates: /proc/driver/nvidia/version

  # BoardName doesn't seem to matter much
  - name: Xorg config magic to get NVIDIA hardware OpenGL
    copy:
      dest: /usr/share/X11/xorg.conf.d/20-nvidia.conf
      content: |
        Section "Device"
          Identifier "Nvidia Card"
          Driver "nvidia"
          VendorName "NVIDIA Corporation"
          BoardName "Tesla M60"
        EndSection

  # rc.local still supported as a systemd service in Ubuntu 18.04
  - name: Xorg startup script
    copy:
      dest: /etc/rc.local
      mode: '0755'
      owner: root
      group: root
      content: |
        #!/bin/bash
        /usr/bin/X11/X &
        exit 0

  # start Xorg
  - name: Start Xorg
    systemd:
      enabled: True
      state: started
      name: rc-local

  - name: Add an Apt signing key for NVIDIA Docker container repository
    apt_key:
      url: https://nvidia.github.io/nvidia-docker/gpgkey
      state: present

  - name: Add NVIDIA container repositories
    apt_repository:
      repo: "{{ item }}"
      state: present
    loop: "{{ lookup('url', 'https://nvidia.github.io/nvidia-docker/{{ ansible_distribution|lower }}{{ ansible_distribution_version }}/nvidia-docker.list', wantlist=True) }}"

  - name: Install nvidia-container-toolkit
    apt:
      name: "{{ packages }}"
    vars:
      packages:
          - nvidia-container-toolkit

  # Should test first if we actually installed nvidia-container-toolkit
  - name: Restart Docker after installing nvidia-container-toolkit
    systemd:
      state: restarted
      name: docker

  - name: Download Azure Pipelines agent for Linux
    get_url:
      url: "https://vstsagentpackage.azureedge.net/agent/{{ azure_pipelines_agent_version }}/{{ azure_pipelines_agent_filename}}"
      dest: "/tmp/{{ azure_pipelines_agent_filename }}"
      mode: '0644'

  - name: Create install dir for Azure Pipelines agent
    file:
      path: "~/{{ azure_pipelines_agent_dir }}"
      state: directory
    become: no
  
  - name: Unpack the archive into installation dir
    unarchive:
      src: "/tmp/{{ azure_pipelines_agent_filename }}"
      dest: "~/{{ azure_pipelines_agent_dir }}"
      remote_src: yes
    become: no
    args:
      creates: "~/{{ azure_pipelines_agent_dir }}/config.sh"

  - name: Configure the Azure Pipelines agent
    command: "./config.sh --unattended 
      --url https://dev.azure.com/{{ azure_pipelines_organization }} 
      --auth pat 
      --token {{ azure_pipelines_token }} 
      --pool '{{ azure_pipelines_pool }}' 
      --agent {{ ansible_hostname }} 
      --replace
      --acceptTeeEula"
    become: no
    no_log: True
    args:
      chdir: "~/{{ azure_pipelines_agent_dir}}"
      creates: "~/{{ azure_pipelines_agent_dir}}/.agent"

  - name: Test for service already created
    shell: "./svc.sh status | grep -q -v -e '^$' -e  'not installed'"
    register: azure_pipelines_service_installed
    ignore_errors: true
    args:
      chdir: "~{{ ansible_user }}/{{ azure_pipelines_agent_dir }}"

  - name: Install Azure Pipelines agent as a service
    command: "./svc.sh install"
    args:
      chdir: "~{{ ansible_user }}/{{ azure_pipelines_agent_dir }}"
    when:
      azure_pipelines_service_installed.rc == 1

  # No harm done if already started
  - name: Start the Azure Pipelines agent service
    command: "./svc.sh start"
    args:
      chdir: "~{{ ansible_user }}/{{ azure_pipelines_agent_dir }}"
