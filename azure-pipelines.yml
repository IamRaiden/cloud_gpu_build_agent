# Demonstrate creating a self hosted GPU accelerated build agent using Terraform,
# and then running a job on that agent that shows OpenGL is available when building inside a container

# TODO:
# - create temporary and unique agent pool to avoid clashes between different builds (or look at demands as a mechanism)
# - robust checking that the GPU agent has been destroyed (don't run the meter!)
# - allow the GPU builder to stick around for a few minutes, don't always destroy it
# - correctly deregister the GPU build agent from the pool before destroying it
# - consider generating temp ssh keys on the fly to provision GPU build agent
# - Demonstrate GCP and AWS
# - Figure out dependencies between matrixed jobs

trigger:
- master

# no PR triggers: only committers to the master branch should be able to trigger these builds
pr: none

jobs:
- job: GPUCreateTerraform
  strategy:
    matrix:
      azure:
        cspName: 'azure'
      aws:
        cspName: 'aws'
      gcp:
        cspName: 'gcp'
    maxParallel: 3
  pool:
    vmImage: ubuntu-18.04
  steps:
    - task: DownloadSecureFile@1
      name: ssh_public_key
      displayName: 'Download ssh public key'
      inputs:
        secureFile: id_rsa.pub
    - task: DownloadSecureFile@1
      name: ssh_private_key
      displayName: 'Download ssh private key'
      inputs:
        secureFile: id_rsa
    - script: |
        mkdir ~/.ssh
        chmod 700 ~/.ssh
        sudo cp $(ssh_private_key.secureFilePath) ~/.ssh/id_rsa
        sudo cp $(ssh_public_key.secureFilePath) ~/.ssh/id_rsa.pub
        sudo chown $(id -u):$(id -g) ~/.ssh/id_rsa
        sudo chown $(id -u):$(id -g) ~/.ssh/id_rsa.pub
        chmod 600 ~/.ssh/id_rsa
        chmod 644 ~/.ssh/id_rsa.pub
      displayName: 'Install ssh keys'
    - script: |
        cd $(cspName)
        terraform init -backend-config="token=$TF_API_TOKEN" -backend-config="organization=$TF_API_ORGANIZATION" -backend-config=backend.hcl
        terraform apply -auto-approve
      displayName: 'Terraform builds the GPU build agent on $(cspName)'
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
        TF_VAR_aws_access_key_id: $(TF_VAR_aws_access_key_id)
        TF_VAR_aws_secret_access_key: $(TF_VAR_aws_secret_access_key)
        AZURE_DEVOPS_ORGANIZATION: $(AZURE_DEVOPS_ORGANIZATION)
        AZURE_DEVOPS_PAT_TOKEN: $(AZURE_DEVOPS_PAT_TOKEN)
        AZURE_DEVOPS_GPU_POOL: 'GPU Ubuntu 18.04 $(cspName)'
        TF_API_TOKEN: $(TF_API_TOKEN)
        TF_API_ORGANIZATION: $(TF_API_ORGANIZATION)

- job: GPUDemoOpenGL
  dependsOn: GPUCreateTerraform
  strategy:
    matrix:
      azure:
        cspName: 'azure'
      aws:
        cspName: 'aws'
      gcp:
        cspName: 'gcp'
    maxParallel: 3
  pool:
    name: 'GPU Ubuntu 18.04 $(cspName)'
  container:
    image: aswftesting/ci-ocio:2019.1
    options: --gpus all -v /tmp/.X11-unix:/tmp/.X11-unix
  steps:
    - script: |
        glxinfo
      displayName: 'Demonstrate GPU accelerated X visuals on $(cspName)'
      env:
        DISPLAY: ':0.0'

- job: GPUDestroyTerraform
  dependsOn: GPUDemoOpenGL
  strategy:
    matrix:
      azure:
        cspName: 'azure'
      aws:
        cspName: 'aws'
      gcp:
        cspName: 'gcp'
    maxParallel: 3
  pool:
    vmImage: ubuntu-18.04
  steps:
  - task: DownloadSecureFile@1
    name: ssh_public_key
    displayName: 'Download ssh public key'
    inputs:
      secureFile: id_rsa.pub
  - task: DownloadSecureFile@1
    name: ssh_private_key
    displayName: 'Download ssh private key'
    inputs:
      secureFile: id_rsa
  - script: |
      mkdir ~/.ssh
      chmod 700 ~/.ssh
      sudo cp $(ssh_private_key.secureFilePath) ~/.ssh/id_rsa
      sudo cp $(ssh_public_key.secureFilePath) ~/.ssh/id_rsa.pub
      sudo chown $(id -u):$(id -g) ~/.ssh/id_rsa
      sudo chown $(id -u):$(id -g) ~/.ssh/id_rsa.pub
      chmod 600 ~/.ssh/id_rsa
      chmod 644 ~/.ssh/id_rsa.pub
    displayName: 'Install ssh keys'  
  - script: |
      cd $(cspName)
      terraform init -backend-config="token=$TF_API_TOKEN" -backend-config="organization=$TF_API_ORGANIZATION" -backend-config=backend.hcl
      terraform destroy -auto-approve
    displayName: 'Terraform destroys the GPU build agent on $(cspName)'
    env:
      ARM_CLIENT_ID: $(ARM_CLIENT_ID)
      ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
      ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
      ARM_TENANT_ID: $(ARM_TENANT_ID)
      TF_VAR_aws_access_key_id: $(TF_VAR_aws_access_key_id)
      TF_VAR_aws_secret_access_key: $(TF_VAR_aws_secret_access_key)
      TF_API_TOKEN: $(TF_API_TOKEN)
      TF_API_ORGANIZATION: $(TF_API_ORGANIZATION)
