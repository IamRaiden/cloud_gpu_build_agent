# Demonstrate creating a self hosted GPU accelerated build agent using Terraform,
# and then running a job on that agent that shows OpenGL is available when building inside a container

# TODO:
# - create temporary and unique agent pool to avoid clashes between different builds (or look at demands as a mechanism)
# - robust checking that the GPU agent has been destroyed (don't run the meter!)
# - a better mechanism for managing the Terraform tfstate file
# - allow the GPU builder to stick around for a few minutes, don't always destroy it
# - correctly deregister the GPU build agent from the pool before destroying it
# - consider generating temp ssh keys on the fly to provision GPU build agent

trigger:
- master

stages:
- stage: GPUCreate
  pool:
    vmImage: ubuntu-18.04
  jobs:
  - job: GPUCreateTerraform
    steps:
      - task: DownloadSecureFile@1
        name: ssh_public_key
        displayName: 'Download ssh public key'
        inputs:
          secureFile: id_rsa.pub
      - task: DownloadSecureFile@1
        name: ssh_private_key
        displayName: 'Download ssh private key'
        inputs:
          secureFile: id_rsa
      - script: |
          mkdir ~/.ssh
          chmod 700 ~/.ssh
          sudo cp $(ssh_private_key.secureFilePath) ~/.ssh/id_rsa
          sudo cp $(ssh_public_key.secureFilePath) ~/.ssh/id_rsa.pub
          sudo chown $(id -u):$(id -g) ~/.ssh/id_rsa
          sudo chown $(id -u):$(id -g) ~/.ssh/id_rsa.pub
          chmod 600 ~/.ssh/id_rsa
          chmod 644 ~/.ssh/id_rsa.pub
        displayName: 'Install ssh keys'
      - script: |
          cd azure
          terraform init
          terraform apply -auto-approve
        displayName: 'Terraform builds the GPU build agent on Azure'
        env:
          ARM_CLIENT_ID: $(ARM_CLIENT_ID)
          ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
          ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
          ARM_TENANT_ID: $(ARM_TENANT_ID)
      - publish: $(System.DefaultWorkingDirectory)/azure/terraform.tfstate
        artifact: GPU_agent_tfstate

- stage: GPUDemo
  pool:
    name: 'GPU Ubuntu 18.04'

  jobs:
    - job: GPUDemoOpenGL
      container:
        image: aswftesting/ci-ocio:2019.1
        options: --gpus all -v /tmp/.X11-unix:/tmp/.X11-unix
      steps:
        - script: |
            glxinfo
          displayName: 'Demonstrate GPU accelerated X visuals'
          env:
            DISPLAY: 0.0

- stage: GPUDestroy
  pool:
    vmImage: ubuntu-18.04
  jobs:
    - job: GPUDestroyTerraform
      steps:
      - task: DownloadPipelineArtifact@2
        inputs:
          artifact: GPU_agent_tfstate
          path: $(Build.SourcesDirectory)/azure
      - script: |
          cd azure
          terraform destroy
        displayName: 'Terraform destroys the GPU build agent on Azure'
        env:
          ARM_CLIENT_ID: $(ARM_CLIENT_ID)
          ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
          ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
          ARM_TENANT_ID: $(ARM_TENANT_ID)



